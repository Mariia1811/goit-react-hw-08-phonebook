{"version":3,"file":"static/js/315.804ba0e2.chunk.js","mappings":"2QAGaA,EAAsBC,EAAAA,GAAAA,QAAH,+GAOnBC,EAAoBD,EAAAA,GAAAA,GAAH,4IAQjBE,EAAoBF,EAAAA,GAAAA,IAAH,mFAMjBG,EAAoBH,EAAAA,GAAAA,MAAH,gJASjBI,GAAoBJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,6SAajBM,GAA2BN,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAH,uCAIxBQ,EAA2BR,EAAAA,GAAAA,OAAH,4e,UCnC/BS,EAAmBC,EAAAA,GAAW,CAClCC,KAAMD,EAAAA,KAAaE,SAAS,YAC5BC,MAAOH,EAAAA,KAAaG,MAAM,yBAAyBD,SAAS,YAC5DE,SAAUJ,EAAAA,KAAaE,SAAS,YAChCG,gBAAiBL,EAAAA,KACdM,MAAM,CAACN,EAAAA,GAAQ,YAAa,MAAO,wBACnCE,SAAS,cA6Ed,EA1EqB,WACnB,IAAMK,GAAWC,EAAAA,EAAAA,MAWjB,OACE,SAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,UAACrB,EAAD,YACE,SAACE,EAAD,8DACA,SAAC,KAAD,CACEoB,cAAe,CACbV,KAAM,GACNE,MAAO,GACPC,SAAU,GACVC,gBAAiB,IAEnBN,iBAAkBA,EAClBa,SArBa,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACxBC,EAAU,CACdd,KAAMY,EAAOZ,KACbE,MAAOU,EAAOV,MACdC,SAAUS,EAAOR,iBAEnBE,GAASS,EAAAA,EAAAA,IAASD,IAClBD,GACD,EAKK,SAUG,gBAAGG,EAAH,EAAGA,aAAH,OACC,UAAC,KAAD,YACE,UAACzB,EAAD,YACE,UAACC,EAAD,CAAmByB,QAAQ,OAA3B,kBAEE,SAACxB,EAAD,CAAmByB,KAAK,OAAOlB,KAAK,aAEtC,SAACL,EAAD,CAA0BK,KAAK,OAAOmB,UAAU,YAGlD,UAAC5B,EAAD,YACE,UAACC,EAAD,CAAmByB,QAAQ,QAA3B,mBAEE,SAACxB,EAAD,CAAmByB,KAAK,QAAQlB,KAAK,cAEvC,SAACL,EAAD,CAA0BK,KAAK,QAAQmB,UAAU,YAGnD,UAAC5B,EAAD,YACE,UAACC,EAAD,CAAmByB,QAAQ,WAA3B,sBAEE,SAACxB,EAAD,CAAmByB,KAAK,WAAWlB,KAAK,iBAE1C,SAACL,EAAD,CAA0BK,KAAK,WAAWmB,UAAU,YAGtD,UAAC5B,EAAD,YACE,UAACC,EAAD,CAAmByB,QAAQ,kBAA3B,8BAEE,SAACxB,EAAD,CAAmByB,KAAK,WAAWlB,KAAK,wBAE1C,SAACL,EAAD,CACEK,KAAK,kBACLmB,UAAU,YAId,SAACtB,EAAD,CAA0BqB,KAAK,SAASE,SAAUJ,EAAlD,wBArCH,QA8CV,C","sources":["pages/Register/Register.styled.js","pages/Register/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Field, ErrorMessage } from 'formik';\n\nexport const RegisterFormWrapper = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 60px;\n`;\n\nexport const RegisterFormTitle = styled.h2`\n  margin: 0 0 24px;\n  font-size: 32px;\n  font-style: oblique;\n  color: #576574;\n  text-shadow: #000 0px 0 1px;\n`;\n\nexport const RegisterFormField = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nexport const RegisterFormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 18px;\n  margin-bottom: 8px;\n  color: #576574;\n`;\n\nexport const RegisterFormInput = styled(Field)`\n   min-width: 280px;\n  padding: 8px;\n  font-size: 20px;\n  border: 1px solid rgba(33, 33, 33, 0.5);\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  overflow: hidden;\n  outline: none;\n   &:hover {\n   box-shadow: 0px 4px 4px rgba(0, 0, 200, 0.5);\n`;\n\nexport const RegisterFormErrorMessage = styled(ErrorMessage)`\n  color: red;\n`;\n\nexport const RegisterFormSubmitButton = styled.button`\n  padding: 8px 18px;\n  width: 100%;\n  margin-top:10px;\n  font-size: 20px;\n  border: none;\n  border-radius: 2px;\n  background-color:rgba(34, 47, 62, 0.4);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  outline: none;\n  cursor: pointer;\n  &:hover {\n    background-color: #70a1ff;\n    border-color: #70a1ff;\n    overflow: hidden;\n    box-shadow: 0px 2px 2px rgba(0, 0, 200, 0.5);\n\n  &:disabled {\n    background-color: lightgray;\n    cursor: default;\n`;\n","import { Container } from '@mui/material';\nimport { Formik, Form } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport * as Yup from 'yup';\nimport {\n  RegisterFormErrorMessage,\n  RegisterFormField,\n  RegisterFormInput,\n  RegisterFormLabel,\n  RegisterFormSubmitButton,\n  RegisterFormTitle,\n  RegisterFormWrapper,\n} from './Register.styled';\n\nconst validationSchema = Yup.object({\n  name: Yup.string().required('Required'),\n  email: Yup.string().email('Invalid email address').required('Required'),\n  password: Yup.string().required('Required'),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Required'),\n});\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const newUser = {\n      name: values.name,\n      email: values.email,\n      password: values.confirmPassword,\n    };\n    dispatch(register(newUser));\n    resetForm();\n  };\n  return (\n    <Container maxWidth=\"xl\">\n      <RegisterFormWrapper>\n        <RegisterFormTitle>Create your own phone book by registering now!</RegisterFormTitle>\n        <Formik\n          initialValues={{\n            name: '',\n            email: '',\n            password: '',\n            confirmPassword: '',\n          }}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ isSubmitting }) => (\n            <Form>\n              <RegisterFormField>\n                <RegisterFormLabel htmlFor=\"name\">\n                  Name\n                  <RegisterFormInput type=\"text\" name=\"name\" />\n                </RegisterFormLabel>\n                <RegisterFormErrorMessage name=\"name\" component=\"div\" />\n              </RegisterFormField>\n\n              <RegisterFormField>\n                <RegisterFormLabel htmlFor=\"email\">\n                  Email\n                  <RegisterFormInput type=\"email\" name=\"email\" />\n                </RegisterFormLabel>\n                <RegisterFormErrorMessage name=\"email\" component=\"div\" />\n              </RegisterFormField>\n\n              <RegisterFormField>\n                <RegisterFormLabel htmlFor=\"password\">\n                  Password\n                  <RegisterFormInput type=\"password\" name=\"password\" />\n                </RegisterFormLabel>\n                <RegisterFormErrorMessage name=\"password\" component=\"div\" />\n              </RegisterFormField>\n\n              <RegisterFormField>\n                <RegisterFormLabel htmlFor=\"confirmPassword\">\n                  Confirm Password\n                  <RegisterFormInput type=\"password\" name=\"confirmPassword\" />\n                </RegisterFormLabel>\n                <RegisterFormErrorMessage\n                  name=\"confirmPassword\"\n                  component=\"div\"\n                />\n              </RegisterFormField>\n\n              <RegisterFormSubmitButton type=\"submit\" disabled={isSubmitting}>\n                Register\n              </RegisterFormSubmitButton>\n            </Form>\n          )}\n        </Formik>\n      </RegisterFormWrapper>\n    </Container>\n  );\n};\n\nexport default RegisterForm;\n"],"names":["RegisterFormWrapper","styled","RegisterFormTitle","RegisterFormField","RegisterFormLabel","RegisterFormInput","Field","RegisterFormErrorMessage","ErrorMessage","RegisterFormSubmitButton","validationSchema","Yup","name","required","email","password","confirmPassword","oneOf","dispatch","useDispatch","Container","maxWidth","initialValues","onSubmit","values","resetForm","newUser","register","isSubmitting","htmlFor","type","component","disabled"],"sourceRoot":""}